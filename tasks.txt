Create a Python package called "calculator" with:
- __init__.py file
- calculator.py with Calculator class
- operations.py with basic math operations
- tests.py with unit tests
- requirements.txt

2. Flask Web Application
Create a Flask web app with:
- app.py (main Flask app)
- templates/index.html
- static/style.css
- models.py (data models)
- routes.py (API endpoints)
- requirements.txt

3. Data Processing Pipeline
Create a data analysis script that:
- Reads CSV files
- Performs data cleaning
- Generates visualizations
- Exports results to JSON
- Includes error handling

4. CLI Tool
Create a command-line tool that:
- Accepts arguments and options
- Processes files
- Has help documentation
- Includes logging
- Can be installed as a package

5. API Client Library
Create a Python library that:
- Makes HTTP requests
- Handles authentication
- Parses responses
- Includes retry logic
- Has proper error handling

6. System Monitor Dashboard
Create a Python CLI tool that:
- Monitors system resources (CPU, memory, disk)
- Displays real-time metrics in terminal
- Uses rich colors and progress bars
- Shows network statistics
- Creates colorful charts and graphs in CLI
- Includes test script that runs monitoring for 30 seconds then exits
- No user input required - just run and watch colorful output
- Uses Rich library for beautiful terminal display
- use the same branch, do not create a new branch